============================= test session starts ==============================
platform linux -- Python 3.6.6, pytest-5.4.2, py-1.5.2, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/ptisnovs/src/python/testing-in-python/pytest/tests_in_class, inifile: pytest.ini
plugins: print-0.1.3, voluptuous-1.0.2, benchmark-3.2.3, cov-2.5.1
collected 19 items

test_average.py ....F....F....FF...                                      [100%]

=================================== FAILURES ===================================
____________ TestAverageFunction.test_average_basic_1[values4-0.5] _____________

self = <test_average.TestAverageFunction object at 0x7fa12645e240>
values = (0, 10), expected = 0.5

    @pytest.mark.parametrize("values,expected", testdata)
    def test_average_basic_1(self, values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
>       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5

test_average.py:36: AssertionError
________________ TestAverageFunction.test_average_basic_2[0,10] ________________

self = <test_average.TestAverageFunction object at 0x7fa125bee470>
values = (0, 10), expected = 0.5

    @pytest.mark.parametrize("values,expected", testdata, ids=["1,1", "1,2", "0,1", "1,2,3", "0,10"])
    def test_average_basic_2(self, values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
>       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5

test_average.py:42: AssertionError
____________ TestAverageFunction.test_average_basic_3[values4-0.5] _____________

self = <test_average.TestAverageFunction object at 0x7fa1258a0b38>
values = (0, 10), expected = 0.5

    @pytest.mark.parametrize(
        "values,expected",
        [
            pytest.param(
                (1, 1), 1
            ),
            pytest.param(
                (1, 2), 1.5
            ),
            pytest.param(
                (0, 1), 0.5
            ),
            pytest.param(
                (1, 2, 3), 2.0
            ),
            pytest.param(
                (0, 10), 0.5
            ),
            pytest.param(
                (), 0
            ),
        ],
    )
    def test_average_basic_3(self, values, expected):
        """Otestování výpočtu průměru."""
        result = average(values)
>       assert result == expected, "Očekávaná hodnota {}, vráceno {}".format(expected, result)
E       AssertionError: Očekávaná hodnota 0.5, vráceno 5.0
E       assert 5.0 == 0.5

test_average.py:70: AssertionError
_____________ TestAverageFunction.test_average_basic_3[values5-0] ______________

self = <test_average.TestAverageFunction object at 0x7fa1258ab240>, values = ()
expected = 0

    @pytest.mark.parametrize(
        "values,expected",
        [
            pytest.param(
                (1, 1), 1
            ),
            pytest.param(
                (1, 2), 1.5
            ),
            pytest.param(
                (0, 1), 0.5
            ),
            pytest.param(
                (1, 2, 3), 2.0
            ),
            pytest.param(
                (0, 10), 0.5
            ),
            pytest.param(
                (), 0
            ),
        ],
    )
    def test_average_basic_3(self, values, expected):
        """Otestování výpočtu průměru."""
>       result = average(values)

test_average.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
average.py:6: in average
    return f1(x)
average.py:11: in f1
    return f2(x)
average.py:16: in f2
    return f3(x)
average.py:21: in f3
    return f4(x)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = ()

    def f4(x):
        """Část špagetového kódu testovaného modulu."""
>       return sum(x)/float(len(x))
E       ZeroDivisionError: float division by zero

average.py:26: ZeroDivisionError

----------- coverage: platform linux, python 3.6.6-final-0 -----------
Name              Stmts   Miss  Cover
-------------------------------------
average.py           10      0   100%
main.py               4      4     0%
test_average.py      28      0   100%
-------------------------------------
TOTAL                42      4    90%

=========================== short test summary info ============================
FAILED test_average.py::TestAverageFunction::test_average_basic_1[values4-0.5]
FAILED test_average.py::TestAverageFunction::test_average_basic_2[0,10] - Ass...
FAILED test_average.py::TestAverageFunction::test_average_basic_3[values4-0.5]
FAILED test_average.py::TestAverageFunction::test_average_basic_3[values5-0]
========================= 4 failed, 15 passed in 0.11s =========================
